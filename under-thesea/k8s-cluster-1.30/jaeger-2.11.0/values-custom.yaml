config:
  service:
    extensions: [jaeger_storage, jaeger_query, healthcheckv2]
    pipelines:
      traces:
        receivers: [otlp, jaeger, zipkin]
        processors: [batch]
        exporters: [jaeger_storage_exporter]

  extensions:
    healthcheckv2:
      use_v2: true
      http:
        endpoint: 0.0.0.0:13133

    jaeger_query:
      storage:
        traces: primary_store
        traces_archive: archive_store

    jaeger_storage:
      backends:
        primary_store:
          elasticsearch:
            index_prefix: jaeger
            server_urls: ["http://elasticsearch-master:9200"]
            username: elastic
            password: changeme
          memory:
            max_traces: 100000
        archive_store:
          elasticsearch:
            index_prefix: jaeger-archive
            server_urls: ["http://elasticsearch-master:9200"]
            username: elastic
            password: changeme
          memory:
            max_traces: 100000

  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    jaeger:
      protocols:
        grpc:
    zipkin:

  processors:
    batch:

  exporters:
    jaeger_storage_exporter:
      trace_storage: primary_store


provisionDataStore:
  cassandra: false
  elasticsearch: false
  kafka: false

allInOne:
  enabled: true
  replicas: 1
  image:
    repository: jaegertracing/jaeger
    tag: "2.11.0"
  service:
    headless: true
    collector:
      otlp:
        grpc:
          name: otlp-grpc
        http:
          name: otlp-http
  # resources:
  #   limits:
  #     cpu: 500m
  #     memory: 512Mi
  #   requests:
  #     cpu: 256m
  #     memory: 128Mi


storage:
  type: memory


hotrod:
  enabled: false
  podSecurityContext: {}
  securityContext: {}
  replicaCount: 1
  # set the primary command(s) for the hotrod application
  args:
    - all
  # add extra arguments to the hotrod application to customize tracing
  extraArgs: []
  #   - --otel-exporter=otlp
  #   - --jaeger-ui=http://jaeger.chart.local
  # add extra environment variables to the hotrod application
  extraEnv: []
  #   - name: OTEL_EXPORTER_OTLP_ENDPOINT
  #     value: http://my-otel-collector.chart.local:4318
  image:
    registry: ""
    repository: jaegertracing/example-hotrod
    tag: ""
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  service:
    annotations: {}
    name: hotrod
    type: ClusterIP
    # List of IP ranges that are allowed to access the load balancer (if supported)
    loadBalancerSourceRanges: []
    port: 80
  ingress:
    enabled: false
    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # ingressClassName: nginx
    # Used to create Ingress record (should be used with service.type: ClusterIP).
    hosts:
      - chart-example.local
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: chart-example-tls
      #   hosts:
      #     - chart-example.local
    pathType:
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  serviceAccount:
    create: true
    # Explicitly mounts the API credentials for the Service Account
    automountServiceAccountToken: false
    annotations: {}
    name:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  tracing:
    host: null
    port: 6831
  livenessProbe:
    path: /
  readinessProbe:
    path: /
# Array with extra yaml objects to install alongside the chart. Values are evaluated as a template.
extraObjects: []
